
local hashes = require 'common.hashes'
local monarch = require 'monarch.monarch'
local game_controller = require 'common.game_controller'

local empty_icon = 'empty'
local empty_str = ''

local cell_format = 'cell%d'
local icon_format = 'icon%d'
local time_format = '%05.2f'

local function cancel_turn_timer(self)
	if self.turn_timer then
		timer.cancel(self.turn_timer)
		self.turn_timer = nil
	end
end

local function set_turn_timer(self, time)
	cancel_turn_timer(self)
	gui.set_text(self.timer, string.format(time_format, time))
	self.turn_timer = timer.delay(1, true, function()
		time = math.max(time - 1, 0)
		gui.set_text(self.timer, string.format(time_format, time))
		if time <= 0 then
			cancel_turn_timer(self)
			self.on_move_timer_over()
		end
	end)
end

local function set_score(self, p1, p2)
	if p1 and p2 then
		gui.set_text(self.score, string.format('%d : %d', p1, p2))
		gui.set_enabled(self.score, true)
	else
		gui.set_enabled(self.score, false)
	end
end

local function set_avatar(self, player, value)
	gui.play_flipbook(self.avatar[player], value or empty_icon)
end

local function set_name(self, player, value)
	value = value or empty_str
	gui.set_text(self.name[player], value)
end

local function reset_grid(self)
	for i = 1, 9 do
		gui.play_flipbook(self.grid[i].icon, empty_icon)
		gui.set_scale(self.grid[i].icon, vmath.vector3(1))
	end
	gui.set_enabled(self.win_line, false)
	gui.set_size(self.win_line, vmath.vector3(10))

	gui.set_text(self.start_time, '')
	gui.set_enabled(self.start_time_tint, false)
	
end

local function set_defaults(self)
	set_turn_timer(self, 15)
	set_score(self)
	set_avatar(self, 'x')
	set_avatar(self, 'o')
	set_name(self, 'x')
	set_name(self, 'o')
	reset_grid(self)
end

local function init_nodes(self)
	self.timer = gui.get_node('timer_time')
	self.score = gui.get_node('score')
	self.name = {
		x = gui.get_node('name1'),
		o = gui.get_node('name2'),
	}
	self.avatar = {
		x = gui.get_node('avatar1'),
		o = gui.get_node('avatar2'),
	}
	self.grid = {}
	for i = 1, 9 do
		self.grid[i] = {
			touch = gui.get_node(cell_format:format(i)),
			icon = gui.get_node(icon_format:format(i)),
		}
	end
	self.start_time_tint = gui.get_node('start_time_tint')
	self.start_time = gui.get_node('start_time')
	self.win_line = gui.get_node('win_line')
end

local function check_cell_touch(self, action)
	local grid = self.grid
	for i = 1, 9 do
		if gui.pick_node(grid[i].touch, action.x, action.y) then
			msg.post('main:/main#main', 'on_cell_touched', { index = i })
			return true
		end
	end
end

local function set_players(self, players)
	set_avatar(self, 'x', players.x.avatar)
	set_name(self, 'x', players.x.name)

	set_avatar(self, 'o', players.o.avatar)
	set_name(self, 'o', players.o.name)

	if players.x.score ~= 0 or players.o.score ~= 0 then
		set_score(self, players.x.score, players.o.score)
	end
end

local function start_round_timer(self, time)
	local alreay_shown = gui.is_enabled(self.start_time_tint)
	if time <= 0 then
		gui.animate(self.start_time_tint, 'color.w', 0, gui.EASING_LINEAR, 0.15, 0.25, function()
			gui.set_enabled(self.start_time_tint, false)
		end)
	elseif not alreay_shown then
		gui.set_alpha(self.start_time_tint, 0.15)
		gui.set_enabled(self.start_time_tint, true)
		gui.animate(self.start_time_tint, 'color.w', 0.8, gui.EASING_LINEAR, 0.25)
	end
	gui.animate(self.start_time, gui.PROP_SCALE, 2, gui.EASING_LINEAR, 0.25, 0, function()
		gui.set_text(self.start_time, time > 0 and time or 'GO!')
		gui.animate(self.start_time, gui.PROP_SCALE, 1.45, gui.EASING_LINEAR, 0.2)
	end)
end

local function set_current_turn(self, turn, time)
	set_turn_timer(self, time)
end

local function turn(self, index, value)
	gui.play_flipbook(self.grid[index].icon, value)
end

local function animate_gameover(node, pos, angle, len)
	gui.set_position(node, pos)
	gui.set_rotation(node, vmath.vector3(0,0,angle))
	gui.set_enabled(node, true)
	gui.animate(node, 'size.x', len, gui.EASING_LINEAR, 0.4)
end

local function gameover(self, steps, winner, callback)
	if steps then
		for i = 1, #steps do
			gui.animate(self.grid[steps[i]].icon, gui.PROP_SCALE, 1.3, gui.EASING_LINEAR, 0.2, (i-1)*0.22, i == #steps and callback)
		end
		local pos = gui.get_position(self.grid[steps[1]].touch)
		local to_pos = gui.get_position(self.grid[steps[3]].touch)
		local angle = 0
		local len = 0
		if pos.x == to_pos.x then
			angle = -90
			len = 360
			pos.y = pos.y + 36
		elseif pos.y == to_pos.y then
			angle = 0
			len = 360
			pos.x = pos.x - 36
		else
			local main_diag = pos.x < to_pos.x
			angle = main_diag and -45 or -135
			len = 500
			pos.y = pos.y + 36
			pos.x = pos.x + (main_diag and -36 or 36)
		end
		animate_gameover(self.win_line, pos, angle, len)
	else
		callback()
	end
end

local function create_listeners(self)
	local listeners = {
		set_players = gui.wrap_func(self, set_players),
		set_current_turn = gui.wrap_func(self, set_current_turn),
		start_round_timer = gui.wrap_func(self, start_round_timer),
		stop_turn_timer = gui.wrap_func(self, cancel_turn_timer),
		turn = gui.wrap_func(self, turn),
		gameover = gui.wrap_func(self, gameover),
		on_new_round = gui.wrap_func(self, set_defaults),
	}
	self.on_move_timer_over = function()
		if listeners.on_move_timer_over then
			listeners.on_move_timer_over()
		end
	end
	return listeners
end

function init(self)
	init_nodes(self)
	set_defaults(self)
	msg.post('.', hashes.acquire_input_focus)
	game_controller.set_ui(create_listeners(self))
	gui.set_render_order(4)
end

function on_input(self, action_id, action)
	if action_id == hashes.touch then
		if action.pressed then
			return check_cell_touch(self, action)
		end
	end
end

function final(self)
	cancel_turn_timer(self)
end


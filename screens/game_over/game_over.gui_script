
local monarch = require 'monarch.monarch'
local screens = require 'common.screens'
local hashes = require 'common.hashes'

local buttons = {
	play_again = function(self)
		msg.post('main:/main#main', 'revenge', { me = true })
	end,
	leave = function(self)
		msg.post('main:/main#main', 'leave_game')
		msg.post('main:/sound#sounds', 'screen')
		monarch.show( screens.main_menu, { clear = true })
	end
}

local function create_button(self, id, action)
	return {
		touch = gui.get_node(id .. '_button'),
		root = gui.get_node(id .. '_root'),
		icon = gui.get_node(id .. '_button_icon'),
		scale = vmath.vector3(1.15),
		action = action,
	}
end

function init(self)
	self.buttons = {}
	self.data = monarch.data(screens.game_over)
	self.gameover_text = gui.get_node('gameover_text')

	local win_player = self.data.win
	gui.set_text(self.gameover_text, self.data.win and (self.data.win.me and 'You win!' or 'You Lose!') or 'TIE!')
	
	for id, action in pairs(buttons) do
		table.insert(self.buttons, create_button(self, id, action))
	end
	msg.post('.', 'acquire_input_focus')
	gui.set_render_order(6)
end

function on_input(self, action_id, action)
	if action_id == hashes.touch then
		if not self.pressed and action.pressed then
			for i, button in ipairs(self.buttons) do
				if gui.pick_node(button.touch, action.x, action.y) then
					self.pressed = i
					gui.animate(button.root, gui.PROP_SCALE, 0.8, gui.EASING_LINEAR, 0.2)
					break
				end
			end
		elseif action.released and self.pressed then
			local released = nil
			for i, button in ipairs(self.buttons) do
				if gui.pick_node(button.touch, action.x, action.y) then
					released = i
					break
				end
			end
			if released and self.pressed == released then
				self.buttons[released].action(self)
			end
			gui.animate(self.buttons[self.pressed].root, gui.PROP_SCALE, 1, gui.EASING_LINEAR, 0.2)
			self.pressed = nil
		end
	end
end
